========================================================== 2 ===========================================================

$arr1 = new ArrayIterator(range(0, 10));
$arr2 = new ArrayIterator(range(11, 20));
class GreaterThenThreeFilterIterator extends FilterIterator
{
    public function accept()
    {
        return ($this->current() > 3 && $this->current() < 8);
    }
}
$append = new AppendIterator();
$append->append(new GreaterThenThreeFilterIterator($arr1));
$append->append(new GreaterThenThreeFilterIterator($arr2));
========================================================== 3 ===========================================================

$loader = Loader::getInstance();
$array = ['apple', 'avocado', 'pineapple', 'orange', 'potato'];
$arIterator = new ArrayIterator($array);
$iterator = new RegexIterator($arIterator, '/^p/');
var_dump(iterator_to_array($iterator));

========================================================== 4 ===========================================================

$arr = array(0 => 'A', 1 => 'B', 2 => 'C', 3 => 'D', 4 => 'F', 'nonumeric' => 'useless');
$arrIterator = new ArrayIterator($arr);
$iterator = new RegexIterator(
    $arrIterator,
    '/^\d*$/',
    RegexIterator::MATCH,
    RegexIterator::USE_KEY
);

========================================================== 5 ===========================================================

try {
    $pdo = new PDO('mysql:host=localhost;dbname=test', 'root', 'root');
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    $pdoStatement = $pdo->query('SELECT * FROM ShowIteratorIterator', PDO::FETCH_ASSOC);
    $iterator = new LimitIterator(new IteratorIterator($pdoStatement), 0, 2);

} catch (PDOException $e) {
    echo 'Подключение не удалось: ' . $e->getMessage();
}
var_dump(iterator_to_array($iterator));

========================================================== 6 ===========================================================

$arr = [
    'a',
    array('a', 'b', 'c'),
    'b',
    array('a', 'b', 'c'),
    'c',
    'd'
];
$arrReAI = new RecursiveArrayIterator($arr);
$tree = new ParentIterator($arrReAI);

var_dump(iterator_to_array($tree, false));

========================================================== 7 ===========================================================

class GetOnlyOwnMethodsFilterIterator extends FilterIterator
{
    public function accept()
    {
        return !in_array($this->current()->getName(), array(
            '__construct','__toString', 'getPathInfo', 'openFile','_bad_state_ex',
            'getLinkTarget', 'getFileInfo'));
    }
}

$file = new SplFileInfo(__FILE__);

$arrIt = new ArrayIterator((new ReflectionClass($file))->getMethods());
$itt = new GetOnlyOwnMethodsFilterIterator($arrIt);

$methods = [];
/**@var ReflectionMethod $method*/
foreach ($itt as $key => $method) {
    $methods[$method->getName()] = $method->invoke($file);
}
var_dump($methods);

========================================================== 8 ===========================================================
function DirectoryIteratorToArray(DirectoryIterator $it) {
    $result = array();
    foreach ($it as $key => $child) {
        if ($child->isDot()) {
            continue;
        }
        $name = $child->getBasename();
        if ($child->isDir()) {
            $subit = new DirectoryIterator($child->getPathname());
            $result[$name] = DirectoryIteratorToArray($subit);
        } else {
            $result[] = $name;
        }
    }
    return $result;
}

========================================================== 9 ===========================================================
========================================================== 10 ===========================================================
========================================================== 11 ===========================================================
========================================================== 12 ===========================================================
========================================================== 13 ===========================================================
========================================================== 14 ===========================================================
========================================================== 15 ===========================================================
========================================================== 16 ===========================================================
========================================================== 17 ===========================================================
========================================================== 18 ===========================================================
========================================================== 19 ===========================================================
========================================================== 20 ===========================================================

